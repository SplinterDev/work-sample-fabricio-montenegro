[{"D:\\Dev Projects\\repos\\work-sample\\src\\index.js":"1","D:\\Dev Projects\\repos\\work-sample\\src\\App.js":"2","D:\\Dev Projects\\repos\\work-sample\\src\\reportWebVitals.js":"3","D:\\Dev Projects\\repos\\work-sample\\src\\containers\\MoviesList\\MoviesList.js":"4"},{"size":478,"mtime":1607801025443,"results":"5","hashOfConfig":"6"},{"size":958,"mtime":1607803520574,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":150,"mtime":1607801000525,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1dgdbp0",{"filePath":"13","messages":"14","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"D:\\Dev Projects\\repos\\work-sample\\src\\index.js",[],["19","20"],"D:\\Dev Projects\\repos\\work-sample\\src\\App.js",["21","22","23"],"D:\\Dev Projects\\repos\\work-sample\\src\\reportWebVitals.js",[],"D:\\Dev Projects\\repos\\work-sample\\src\\containers\\MoviesList\\MoviesList.js",[],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":10,"column":10,"nodeType":"30","messageId":"31","endLine":10,"endColumn":16},{"ruleId":"32","severity":1,"message":"33","line":12,"column":13,"nodeType":"34","endLine":31,"endColumn":4},{"ruleId":"32","severity":1,"message":"35","line":31,"column":7,"nodeType":"36","endLine":31,"endColumn":14},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'movies' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","The 'input' literal is not a valid dependency because it never changes. You can safely remove it.","Literal","no-global-assign","no-unsafe-negation"]